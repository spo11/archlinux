#ifndef INCLUDED_COM_SUN_STAR_AWT_DEVICEINFO_HDL
#define INCLUDED_COM_SUN_STAR_AWT_DEVICEINFO_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace awt {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct DeviceInfo {
    inline DeviceInfo() SAL_THROW(());

    inline DeviceInfo(const ::sal_Int32& Width_, const ::sal_Int32& Height_, const ::sal_Int32& LeftInset_, const ::sal_Int32& TopInset_, const ::sal_Int32& RightInset_, const ::sal_Int32& BottomInset_, const double& PixelPerMeterX_, const double& PixelPerMeterY_, const ::sal_Int16& BitsPerPixel_, const ::sal_Int32& Capabilities_) SAL_THROW(());

    ::sal_Int32 Width;
    ::sal_Int32 Height;
    ::sal_Int32 LeftInset;
    ::sal_Int32 TopInset;
    ::sal_Int32 RightInset;
    ::sal_Int32 BottomInset;
    double PixelPerMeterX;
    double PixelPerMeterY;
    ::sal_Int16 BitsPerPixel;
    ::sal_Int32 Capabilities;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::awt::DeviceInfo* );

#endif // INCLUDED_COM_SUN_STAR_AWT_DEVICEINFO_HDL
