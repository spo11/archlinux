#ifndef INCLUDED_COM_SUN_STAR_AWT_XREGION_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XREGION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XRegion; } } } }
#include "com/sun/star/awt/Rectangle.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE XRegion : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::awt::Rectangle SAL_CALL getBounds(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL clear(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL move( ::sal_Int32 nHorzMove, ::sal_Int32 nVertMove ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL unionRectangle( const ::com::sun::star::awt::Rectangle& Rect ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL intersectRectangle( const ::com::sun::star::awt::Rectangle& Region ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL excludeRectangle( const ::com::sun::star::awt::Rectangle& Rect ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL xOrRectangle( const ::com::sun::star::awt::Rectangle& Rect ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL unionRegion( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XRegion >& Region ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL intersectRegion( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XRegion >& Region ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL excludeRegion( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XRegion >& Region ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL xOrRegion( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XRegion >& Region ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::awt::Rectangle > SAL_CALL getRectangles(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XRegion >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_XREGION_HDL
