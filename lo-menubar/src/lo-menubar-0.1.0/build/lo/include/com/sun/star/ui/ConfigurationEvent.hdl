#ifndef INCLUDED_COM_SUN_STAR_UI_CONFIGURATIONEVENT_HDL
#define INCLUDED_COM_SUN_STAR_UI_CONFIGURATIONEVENT_HDL

#include "sal/config.h"

#include "com/sun/star/container/ContainerEvent.hdl"
#include "com/sun/star/uno/Any.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace ui {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ConfigurationEvent: public ::com::sun::star::container::ContainerEvent {
    inline ConfigurationEvent() SAL_THROW(());

    inline ConfigurationEvent(const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Source_, const ::com::sun::star::uno::Any& Accessor_, const ::com::sun::star::uno::Any& Element_, const ::com::sun::star::uno::Any& ReplacedElement_, const ::rtl::OUString& ResourceURL_, const ::com::sun::star::uno::Any& aInfo_) SAL_THROW(());

    ::rtl::OUString ResourceURL CPPU_GCC3_ALIGN(::com::sun::star::container::ContainerEvent);
    ::com::sun::star::uno::Any aInfo;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ui::ConfigurationEvent* );

#endif // INCLUDED_COM_SUN_STAR_UI_CONFIGURATIONEVENT_HDL
