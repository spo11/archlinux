#ifndef INCLUDED_COM_SUN_STAR_AWT_FONTDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_AWT_FONTDESCRIPTOR_HDL

#include "sal/config.h"

#include "com/sun/star/awt/FontSlant.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace awt {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FontDescriptor {
    inline FontDescriptor() SAL_THROW(());

    inline FontDescriptor(const ::rtl::OUString& Name_, const ::sal_Int16& Height_, const ::sal_Int16& Width_, const ::rtl::OUString& StyleName_, const ::sal_Int16& Family_, const ::sal_Int16& CharSet_, const ::sal_Int16& Pitch_, const float& CharacterWidth_, const float& Weight_, const ::com::sun::star::awt::FontSlant& Slant_, const ::sal_Int16& Underline_, const ::sal_Int16& Strikeout_, const float& Orientation_, const ::sal_Bool& Kerning_, const ::sal_Bool& WordLineMode_, const ::sal_Int16& Type_) SAL_THROW(());

    ::rtl::OUString Name;
    ::sal_Int16 Height;
    ::sal_Int16 Width;
    ::rtl::OUString StyleName;
    ::sal_Int16 Family;
    ::sal_Int16 CharSet;
    ::sal_Int16 Pitch;
    float CharacterWidth;
    float Weight;
    ::com::sun::star::awt::FontSlant Slant;
    ::sal_Int16 Underline;
    ::sal_Int16 Strikeout;
    float Orientation;
    ::sal_Bool Kerning;
    ::sal_Bool WordLineMode;
    ::sal_Int16 Type;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::awt::FontDescriptor* );

#endif // INCLUDED_COM_SUN_STAR_AWT_FONTDESCRIPTOR_HDL
