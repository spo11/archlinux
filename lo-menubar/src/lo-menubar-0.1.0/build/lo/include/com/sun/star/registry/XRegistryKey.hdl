#ifndef INCLUDED_COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HDL
#define INCLUDED_COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HDL

#include "sal/config.h"

#include "com/sun/star/registry/RegistryValueType.hdl"
#include "com/sun/star/registry/InvalidValueException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace registry { class XRegistryKey; } } } }
#include "com/sun/star/registry/InvalidRegistryException.hdl"
#include "com/sun/star/registry/RegistryKeyType.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace registry {

class SAL_NO_VTABLE XRegistryKey : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::rtl::OUString SAL_CALL getKeyName() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::sal_Bool SAL_CALL isReadOnly(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isValid(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::registry::RegistryKeyType SAL_CALL getKeyType( const ::rtl::OUString& rKeyName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::registry::RegistryValueType SAL_CALL getValueType(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getLongValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setLongValue( ::sal_Int32 value ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL getLongListValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setLongListValue( const ::com::sun::star::uno::Sequence< ::sal_Int32 >& seqValue ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getAsciiValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAsciiValue( const ::rtl::OUString& value ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getAsciiListValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAsciiListValue( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& seqValue ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getStringValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setStringValue( const ::rtl::OUString& value ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getStringListValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setStringListValue( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& seqValue ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getBinaryValue(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::InvalidValueException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setBinaryValue( const ::com::sun::star::uno::Sequence< ::sal_Int8 >& value ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::registry::XRegistryKey > SAL_CALL openKey( const ::rtl::OUString& aKeyName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::registry::XRegistryKey > SAL_CALL createKey( const ::rtl::OUString& aKeyName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL closeKey(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deleteKey( const ::rtl::OUString& rKeyName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::registry::XRegistryKey > > SAL_CALL openKeys(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getKeyNames(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL createLink( const ::rtl::OUString& aLinkName, const ::rtl::OUString& aLinkTarget ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deleteLink( const ::rtl::OUString& rLinkName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getLinkTarget( const ::rtl::OUString& rLinkName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getResolvedName( const ::rtl::OUString& aKeyName ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::registry::XRegistryKey >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HDL
