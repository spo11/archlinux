#ifndef INCLUDED_COM_SUN_STAR_FRAME_XFRAME_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XFRAME_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XController; } } } }
namespace com { namespace sun { namespace star { namespace frame { class XFrameActionListener; } } } }
#include "com/sun/star/lang/XComponent.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XWindow; } } } }
namespace com { namespace sun { namespace star { namespace frame { class XFramesSupplier; } } } }
namespace com { namespace sun { namespace star { namespace frame { class XFrame; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE XFrame : public ::com::sun::star::lang::XComponent
{
public:

    // Methods
    virtual void SAL_CALL initialize( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow >& xWindow ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow > SAL_CALL getContainerWindow(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setCreator( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFramesSupplier >& Creator ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFramesSupplier > SAL_CALL getCreator(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFrame > SAL_CALL findFrame( const ::rtl::OUString& aTargetFrameName, ::sal_Int32 nSearchFlags ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isTop(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL activate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deactivate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isActive(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL setComponent( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow >& xComponentWindow, const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XController >& xController ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow > SAL_CALL getComponentWindow(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::frame::XController > SAL_CALL getController(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL contextChanged(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL addFrameActionListener( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFrameActionListener >& xListener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeFrameActionListener( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFrameActionListener >& xListener ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XFrame >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_FRAME_XFRAME_HDL
