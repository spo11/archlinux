/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_DisplayManager_UserManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_DisplayManager_UserManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_DisplayManager_UserManager_count_users (DBusGProxy *proxy, gint* OUT_user_count, GError **error)

{
  return dbus_g_proxy_call (proxy, "CountUsers", error, G_TYPE_INVALID, G_TYPE_INT, OUT_user_count, G_TYPE_INVALID);
}

typedef void (*org_gnome_DisplayManager_UserManager_count_users_reply) (DBusGProxy *proxy, gint OUT_user_count, GError *error, gpointer userdata);

static void
org_gnome_DisplayManager_UserManager_count_users_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_user_count;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_user_count, G_TYPE_INVALID);
  (*(org_gnome_DisplayManager_UserManager_count_users_reply)data->cb) (proxy, OUT_user_count, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_DisplayManager_UserManager_count_users_async (DBusGProxy *proxy, org_gnome_DisplayManager_UserManager_count_users_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CountUsers", org_gnome_DisplayManager_UserManager_count_users_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_DisplayManager_UserManager_get_user_list (DBusGProxy *proxy, GArray** OUT_uids, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUserList", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GArray", G_TYPE_INT64), OUT_uids, G_TYPE_INVALID);
}

typedef void (*org_gnome_DisplayManager_UserManager_get_user_list_reply) (DBusGProxy *proxy, GArray *OUT_uids, GError *error, gpointer userdata);

static void
org_gnome_DisplayManager_UserManager_get_user_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GArray* OUT_uids;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GArray", G_TYPE_INT64), &OUT_uids, G_TYPE_INVALID);
  (*(org_gnome_DisplayManager_UserManager_get_user_list_reply)data->cb) (proxy, OUT_uids, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_DisplayManager_UserManager_get_user_list_async (DBusGProxy *proxy, org_gnome_DisplayManager_UserManager_get_user_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUserList", org_gnome_DisplayManager_UserManager_get_user_list_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_DisplayManager_UserManager_get_user_info (DBusGProxy *proxy, const gint64 IN_uid, char ** OUT_user_name, char ** OUT_real_name, char ** OUT_shell, gint* OUT_login_count, char ** OUT_icon_url, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUserInfo", error, G_TYPE_INT64, IN_uid, G_TYPE_INVALID, G_TYPE_STRING, OUT_user_name, G_TYPE_STRING, OUT_real_name, G_TYPE_STRING, OUT_shell, G_TYPE_INT, OUT_login_count, G_TYPE_STRING, OUT_icon_url, G_TYPE_INVALID);
}

typedef void (*org_gnome_DisplayManager_UserManager_get_user_info_reply) (DBusGProxy *proxy, char * OUT_user_name, char * OUT_real_name, char * OUT_shell, gint OUT_login_count, char * OUT_icon_url, GError *error, gpointer userdata);

static void
org_gnome_DisplayManager_UserManager_get_user_info_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_user_name;
  char * OUT_real_name;
  char * OUT_shell;
  gint OUT_login_count;
  char * OUT_icon_url;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_user_name, G_TYPE_STRING, &OUT_real_name, G_TYPE_STRING, &OUT_shell, G_TYPE_INT, &OUT_login_count, G_TYPE_STRING, &OUT_icon_url, G_TYPE_INVALID);
  (*(org_gnome_DisplayManager_UserManager_get_user_info_reply)data->cb) (proxy, OUT_user_name, OUT_real_name, OUT_shell, OUT_login_count, OUT_icon_url, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_DisplayManager_UserManager_get_user_info_async (DBusGProxy *proxy, const gint64 IN_uid, org_gnome_DisplayManager_UserManager_get_user_info_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUserInfo", org_gnome_DisplayManager_UserManager_get_user_info_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT64, IN_uid, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_DisplayManager_UserManager_get_users_info (DBusGProxy *proxy, const GArray* IN_uid, GPtrArray** OUT_user_info, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUsersInfo", error, dbus_g_type_get_collection ("GArray", G_TYPE_INT64), IN_uid, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_INT64, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_STRING, G_TYPE_INVALID)), OUT_user_info, G_TYPE_INVALID);
}

typedef void (*org_gnome_DisplayManager_UserManager_get_users_info_reply) (DBusGProxy *proxy, GPtrArray *OUT_user_info, GError *error, gpointer userdata);

static void
org_gnome_DisplayManager_UserManager_get_users_info_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_user_info;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_INT64, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_STRING, G_TYPE_INVALID)), &OUT_user_info, G_TYPE_INVALID);
  (*(org_gnome_DisplayManager_UserManager_get_users_info_reply)data->cb) (proxy, OUT_user_info, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_DisplayManager_UserManager_get_users_info_async (DBusGProxy *proxy, const GArray* IN_uid, org_gnome_DisplayManager_UserManager_get_users_info_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUsersInfo", org_gnome_DisplayManager_UserManager_get_users_info_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_collection ("GArray", G_TYPE_INT64), IN_uid, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_DisplayManager_UserManager_get_users_loaded (DBusGProxy *proxy, gboolean* OUT_is_loaded, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUsersLoaded", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_is_loaded, G_TYPE_INVALID);
}

typedef void (*org_gnome_DisplayManager_UserManager_get_users_loaded_reply) (DBusGProxy *proxy, gboolean OUT_is_loaded, GError *error, gpointer userdata);

static void
org_gnome_DisplayManager_UserManager_get_users_loaded_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_is_loaded;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_is_loaded, G_TYPE_INVALID);
  (*(org_gnome_DisplayManager_UserManager_get_users_loaded_reply)data->cb) (proxy, OUT_is_loaded, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_DisplayManager_UserManager_get_users_loaded_async (DBusGProxy *proxy, org_gnome_DisplayManager_UserManager_get_users_loaded_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUsersLoaded", org_gnome_DisplayManager_UserManager_get_users_loaded_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_DisplayManager_UserManager */

G_END_DECLS
