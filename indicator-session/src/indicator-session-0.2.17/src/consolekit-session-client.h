/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_ConsoleKit_Session
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_ConsoleKit_Session

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_id (DBusGProxy *proxy, char** OUT_ssid, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetId", error, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_ssid, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_id_reply) (DBusGProxy *proxy, char *OUT_ssid, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_id_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_ssid;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_ssid, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_id_reply)data->cb) (proxy, OUT_ssid, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_id_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_id_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetId", org_freedesktop_ConsoleKit_Session_get_id_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_seat_id (DBusGProxy *proxy, char** OUT_sid, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSeatId", error, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_sid, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_seat_id_reply) (DBusGProxy *proxy, char *OUT_sid, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_seat_id_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_sid;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_sid, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_seat_id_reply)data->cb) (proxy, OUT_sid, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_seat_id_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_seat_id_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSeatId", org_freedesktop_ConsoleKit_Session_get_seat_id_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_session_type (DBusGProxy *proxy, char ** OUT_type, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSessionType", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_type, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_session_type_reply) (DBusGProxy *proxy, char * OUT_type, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_session_type_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_type;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_type, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_session_type_reply)data->cb) (proxy, OUT_type, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_session_type_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_session_type_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSessionType", org_freedesktop_ConsoleKit_Session_get_session_type_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_user (DBusGProxy *proxy, guint* OUT_uid, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUser", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_uid, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_user_reply) (DBusGProxy *proxy, guint OUT_uid, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_user_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_uid;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_uid, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_user_reply)data->cb) (proxy, OUT_uid, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_user_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_user_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUser", org_freedesktop_ConsoleKit_Session_get_user_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_unix_user (DBusGProxy *proxy, guint* OUT_uid, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUnixUser", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_uid, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_unix_user_reply) (DBusGProxy *proxy, guint OUT_uid, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_unix_user_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_uid;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_uid, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_unix_user_reply)data->cb) (proxy, OUT_uid, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_unix_user_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_unix_user_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUnixUser", org_freedesktop_ConsoleKit_Session_get_unix_user_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_x11_display (DBusGProxy *proxy, char ** OUT_display, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetX11Display", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_display, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_x11_display_reply) (DBusGProxy *proxy, char * OUT_display, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_x11_display_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_display;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_display, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_x11_display_reply)data->cb) (proxy, OUT_display, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_x11_display_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_x11_display_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetX11Display", org_freedesktop_ConsoleKit_Session_get_x11_display_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_x11_display_device (DBusGProxy *proxy, char ** OUT_x11_display_device, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetX11DisplayDevice", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_x11_display_device, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_x11_display_device_reply) (DBusGProxy *proxy, char * OUT_x11_display_device, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_x11_display_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_x11_display_device;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_x11_display_device, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_x11_display_device_reply)data->cb) (proxy, OUT_x11_display_device, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_x11_display_device_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_x11_display_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetX11DisplayDevice", org_freedesktop_ConsoleKit_Session_get_x11_display_device_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_display_device (DBusGProxy *proxy, char ** OUT_display_device, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetDisplayDevice", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_display_device, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_display_device_reply) (DBusGProxy *proxy, char * OUT_display_device, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_display_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_display_device;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_display_device, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_display_device_reply)data->cb) (proxy, OUT_display_device, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_display_device_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_display_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetDisplayDevice", org_freedesktop_ConsoleKit_Session_get_display_device_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_remote_host_name (DBusGProxy *proxy, char ** OUT_remote_host_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetRemoteHostName", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_remote_host_name, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_remote_host_name_reply) (DBusGProxy *proxy, char * OUT_remote_host_name, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_remote_host_name_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_remote_host_name;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_remote_host_name, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_remote_host_name_reply)data->cb) (proxy, OUT_remote_host_name, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_remote_host_name_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_remote_host_name_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetRemoteHostName", org_freedesktop_ConsoleKit_Session_get_remote_host_name_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_login_session_id (DBusGProxy *proxy, char ** OUT_login_session_id, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetLoginSessionId", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_login_session_id, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_login_session_id_reply) (DBusGProxy *proxy, char * OUT_login_session_id, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_login_session_id_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_login_session_id;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_login_session_id, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_login_session_id_reply)data->cb) (proxy, OUT_login_session_id, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_login_session_id_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_login_session_id_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetLoginSessionId", org_freedesktop_ConsoleKit_Session_get_login_session_id_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_is_active (DBusGProxy *proxy, gboolean* OUT_active, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsActive", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_active, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_is_active_reply) (DBusGProxy *proxy, gboolean OUT_active, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_is_active_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_active;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_active, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_is_active_reply)data->cb) (proxy, OUT_active, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_is_active_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_is_active_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsActive", org_freedesktop_ConsoleKit_Session_is_active_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_is_local (DBusGProxy *proxy, gboolean* OUT_local, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsLocal", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_local, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_is_local_reply) (DBusGProxy *proxy, gboolean OUT_local, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_is_local_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_local;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_local, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_is_local_reply)data->cb) (proxy, OUT_local, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_is_local_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_is_local_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsLocal", org_freedesktop_ConsoleKit_Session_is_local_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_creation_time (DBusGProxy *proxy, char ** OUT_iso8601_datetime, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCreationTime", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_iso8601_datetime, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_creation_time_reply) (DBusGProxy *proxy, char * OUT_iso8601_datetime, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_creation_time_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_iso8601_datetime;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_iso8601_datetime, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_creation_time_reply)data->cb) (proxy, OUT_iso8601_datetime, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_creation_time_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_creation_time_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCreationTime", org_freedesktop_ConsoleKit_Session_get_creation_time_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_activate (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Activate", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_activate_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_activate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_activate_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_activate_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_activate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Activate", org_freedesktop_ConsoleKit_Session_activate_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_lock (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Lock", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_lock_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_lock_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_lock_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_lock_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_lock_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Lock", org_freedesktop_ConsoleKit_Session_lock_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_unlock (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Unlock", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_unlock_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_unlock_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_unlock_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_unlock_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_unlock_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Unlock", org_freedesktop_ConsoleKit_Session_unlock_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_idle_hint (DBusGProxy *proxy, gboolean* OUT_idle_hint, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetIdleHint", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_idle_hint, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_idle_hint_reply) (DBusGProxy *proxy, gboolean OUT_idle_hint, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_idle_hint_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_idle_hint;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_idle_hint, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_idle_hint_reply)data->cb) (proxy, OUT_idle_hint, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_idle_hint_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_idle_hint_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetIdleHint", org_freedesktop_ConsoleKit_Session_get_idle_hint_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_get_idle_since_hint (DBusGProxy *proxy, char ** OUT_iso8601_datetime, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetIdleSinceHint", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_iso8601_datetime, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_get_idle_since_hint_reply) (DBusGProxy *proxy, char * OUT_iso8601_datetime, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_get_idle_since_hint_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_iso8601_datetime;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_iso8601_datetime, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_get_idle_since_hint_reply)data->cb) (proxy, OUT_iso8601_datetime, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_get_idle_since_hint_async (DBusGProxy *proxy, org_freedesktop_ConsoleKit_Session_get_idle_since_hint_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetIdleSinceHint", org_freedesktop_ConsoleKit_Session_get_idle_since_hint_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_ConsoleKit_Session_set_idle_hint (DBusGProxy *proxy, const gboolean IN_idle_hint, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetIdleHint", error, G_TYPE_BOOLEAN, IN_idle_hint, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_ConsoleKit_Session_set_idle_hint_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_ConsoleKit_Session_set_idle_hint_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_ConsoleKit_Session_set_idle_hint_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_ConsoleKit_Session_set_idle_hint_async (DBusGProxy *proxy, const gboolean IN_idle_hint, org_freedesktop_ConsoleKit_Session_set_idle_hint_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetIdleHint", org_freedesktop_ConsoleKit_Session_set_idle_hint_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_idle_hint, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_ConsoleKit_Session */

G_END_DECLS
